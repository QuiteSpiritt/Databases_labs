Use Conferences

--SELECT на базі однієї таблиці з використанням сортування, накладенням умов зі зв’язками OR та AND:
-- Вибрати всіх виступаючих з академічним ступенем "Master" або "Doctor" і відсортувати їх за ім'ям.
SELECT * FROM Speaker WHERE Academic_Degree = 'Master' OR Academic_Degree = 'Doctor' ORDER BY Name;


--SELECT з виводом обчислюваних полів (виразів) в колонках результату:
-- Вибрати всі виступи та додати до них колонку, яка показує кінцевий час виступу (Start_time + Duration).
SELECT *, DATEADD(MINUTE, Duration, Start_time) AS End_time FROM Presentation;

--SELECT на базі кількох таблиць з використанням сортування, накладенням умов зі зв’язками OR та AND:
SELECT Presentation.Topic, Speaker.Name, Section.Name AS Section_Name
FROM Presentation
JOIN Speaker ON Presentation.Speaker_ID = Speaker.id
JOIN Section ON Presentation.Section_ID = Section.id
WHERE (Speaker.Academic_Degree = 'Professor' OR Speaker.Academic_Degree = 'Master')
  AND (Section.Name = 'Machine Learning' OR Section.Name = 'Data Science')
ORDER BY Presentation.Start_Date, Presentation.Start_time;

--SELECT на базі кількох таблиць з типом поєднання Outer Join:
SELECT Conference.Name AS Conference_Name, Section.Name AS Section_Name
FROM Conference
LEFT JOIN Section ON Conference.id = Section.Conference_ID;

--SELECT з використанням операторів Like, Between, In, Exists, All, Any:
SELECT *
FROM Speaker
WHERE Academic_Degree LIKE '%Master%'
  AND Position BETWEEN 'Data Analyst' AND 'Data Scientist'
  AND Workplace IN ('Tech Corp', 'AI Institute');

 --SELECT з використанням підсумовування та групування:
 SELECT Conference.Name, COUNT(Section.id) AS Section_Count
FROM Conference
JOIN Section ON Conference.id = Section.Conference_ID
GROUP BY Conference.Name;

--SELECT з використанням під-запитів в частині Where:
SELECT *
FROM Presentation
WHERE Section_ID IN (SELECT id FROM Section WHERE Name = 'Machine Learning');

--SELECT з використанням під-запитів в частині From:
SELECT *
FROM Presentation
WHERE Duration > (SELECT AVG(Duration) FROM Presentation);

--Ієрархічний SELECT запит:
SELECT c.Name AS Conference_Name, s.*
FROM Section s
JOIN Conference c ON s.Conference_ID = c.id;

--SELECT запит типу CrossTab:
SELECT Presentation_ID,
       COUNT(CASE WHEN Name = 'Projector' THEN 1 END) AS Projector_Count,
       COUNT(CASE WHEN Name = 'Laptop' THEN 1 END) AS Laptop_Count,
       COUNT(CASE WHEN Name = 'Microscope' THEN 1 END) AS Microscope_Count,
       COUNT(CASE WHEN Name = 'Whiteboard' THEN 1 END) AS Whiteboard_Count
FROM Equipment
GROUP BY Presentation_ID;


--UPDATE на базі однієї таблиці:
UPDATE Speaker
SET Position = 'Senior Researcher'
WHERE Position = 'Lead Researcher';

SELECT * FROM Speaker;

--UPDATE на базі кількох таблиць:
UPDATE Conference
SET Name = 'Annual Symposium', Building = 'Convention Hall D'
WHERE id = 1;

SELECT * FROM Conference;

--Append (INSERT) для додавання записів з явно вказаними значеннями:
INSERT INTO Conference (Name, Holding_period, Building)
VALUES ('Tech Summit', '2024-12-01', 'Conference Center Z');

SELECT * FROM Conference;

--Append (INSERT) для додавання записів з інших таблиць:
INSERT INTO Speaker (Name, Academic_Degree, Workplace, Position, Bio)
SELECT 'Alan Johnson', 'Ph.D.', 'Tech Solutions', 'Lead Data Scientist', 'Experienced data analyst.'
WHERE EXISTS (SELECT 1 FROM Conference WHERE Name = 'Tech Expo');

SELECT * FROM Speaker;
